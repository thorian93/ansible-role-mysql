---
- name: "Preflight - Fail if target host is not stable for this Role."
  fail:
    msg: "This role is not stable for the target operating system, {{ ansible_distribution }} {{ ansible_distribution_major_version }}."
  when: (ansible_distribution is not defined) or
        (ansible_distribution_version is not defined) or
        (ansible_distribution+" "+ansible_distribution_major_version not in mysql_stable_os)

- name: "Include OS Family specific Variables."
  include_vars: "{{ ansible_os_family }}.yml"

- name: "Include Distribution specific Variables."
  include_vars: "{{ ansible_distribution }}.yml"
  changed_when: false
  failed_when: false

- name: "Include Distribution Version specific Variables."
  include_vars: "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"
  changed_when: false
  failed_when: false

- name: "Include OS Family specific Playbook."
  include_tasks: "{{ ansible_os_family }}.yml"

- name: "Get MySQL Version."
  command: 'mysql --version'
  register: mysql_cli_version
  changed_when: false

- name: "Disable remote root login."
  command: 'mysql -NBe "{{ item }}"'
  with_items:
    - DELETE FROM mysql.user WHERE User='{{ mysql_root_user }}' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
  changed_when: false
  when: mysql_login_root_remote | bool

- name: "Get list of Hosts for the root User."
  command: mysql -NBe
    "SELECT Host
    FROM mysql.user
    WHERE User = 'root'
    ORDER BY (Host='localhost') ASC"
  register: mysql_root_hosts
  changed_when: false

- name: "Update MySQL root Password for localhost root Account (5.7.x)."
  shell: >
    mysql -u root -NBe
    'ALTER USER "{{ mysql_root_user }}"@"{{ item }}"
    IDENTIFIED WITH mysql_native_password BY "{{ mysql_root_pw }}";'
  with_items: "{{ mysql_root_hosts.stdout_lines|default([]) }}"
  when: ('5.7.' in mysql_cli_version.stdout or '8.0.' in mysql_cli_version.stdout)

- name: "Update MySQL root Password for localhost root Account (< 5.7.x)."
  shell: >
    mysql -NBe
    'SET PASSWORD FOR "{{ mysql_root_user }}"@"{{ item }}" = PASSWORD("{{ mysql_root_pw }}");'
  with_items: "{{ mysql_root_hosts.stdout_lines|default([]) }}"
  when: ('5.7.' not in mysql_cli_version.stdout and '8.0.' not in mysql_cli_version.stdout)

- name: "Copy .my.cnf in place."
  template:
    src: my.cnf.j2
    dest: /root/.my.cnf
    mode: 0600
    owner: root
    group: root

- name: "Delete anonymous MySQL User."
  mysql_user:
    login_user: "{{ mysql_root_user }}"
    login_password: "{{ mysql_root_pw }}"
    login_unix_socket: "{{ mysql_unix_socket }}"
    name: ''
    host_all: 'yes'
    state: absent

- name: "Delete MySQL Test Database on first Run."
  mysql_db:
    login_user: "{{ mysql_root_user }}"
    login_password: "{{ mysql_root_pw }}"
    login_unix_socket: "{{ mysql_unix_socket }}"
    name: test
    state: absent

- name: "Create MySQL Backup User."
  mysql_user:
    login_user: "{{ mysql_root_user }}"
    login_password: "{{ mysql_root_pw }}"
    login_unix_socket: "{{ mysql_unix_socket }}"
    name: "{{ mysql_backup_user }}"
    password: "{{ mysql_backup_pw }}"
    priv: "*.*:SELECT,SHOW VIEW,RELOAD,REPLICATION CLIENT,EVENT,TRIGGER,LOCK TABLES"
    host: localhost
    state: present
  when: (mysql_monitoring_user is defined and mysql_monitoring_user | length) and (mysql_monitoring_pw is defined)

- name: "Create MySQL Monitoring User."
  mysql_user:
    login_user: "{{ mysql_root_user }}"
    login_password: "{{ mysql_root_pw }}"
    login_unix_socket: "{{ mysql_unix_socket }}"
    name: "{{ mysql_monitoring_user }}"
    password: "{{ mysql_monitoring_pw }}"
    priv: "*.*:SELECT,SHOW VIEW,SHOW DATABASES"
    host: localhost
    state: present
  when: (mysql_monitoring_user is defined and mysql_monitoring_user | length) and (mysql_monitoring_pw is defined)

- name: "Include Autobackup Playbook."
  include_tasks: autobackup.yml
  when: mysql_autobackup_enable | bool
